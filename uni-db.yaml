openapi: 3.0.3
info:
  title: uni-db
  version: '1.0'
  description: api for uni db test skill site
  contact:
    name: Author Ilya
    email: deposha322@mail.ru
servers:
  - url: 'http://localhost:3001/api'
    description: dev
  - url: 'http://localhost:3000/api'
    description: prod
tags:
  - name: authorization
  - name: const
  - name: posts
paths:
  /authorization/login:
    post:
      operationId: post-authorization-login
      description: test
      summary: Login as user with get jwt token
      tags:
        - authorization
      requestBody:
        description: Authorizate
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserAuthorization'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                title: JWTToken
                type: object
                description: jwt token for requests
                properties:
                  token:
                    type: string
                    description: jwt token
                    example: very.long.string
                required:
                  - token
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/BadRequestError'
  /posts:
    get:
      summary: Your GET endpoint
      description: get posts for view
      tags:
        - posts
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PostGetView'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
      operationId: get-posts
      parameters:
        - schema:
            type: string
            default: 'true'
            enum:
              - 'null'
              - 'true'
              - 'false'
          in: query
          name: verificationResult
      security:
        - BearerAuth: []
    post:
      summary: ''
      operationId: post-posts
      description: post new post
      tags:
        - posts
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: number
                required:
                  - id
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                content:
                  type: string
                withoutVerification:
                  type: boolean
                  default: false
              required:
                - title
                - content
      parameters: []
      security:
        - BearerAuth: []
  /posts/manage:
    get:
      summary: Your GET endpoint
      description: get posts for manage
      tags:
        - posts
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PostGetManage'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
      operationId: get-posts-manage
      parameters:
        - schema:
            type: string
            default: 'true'
            enum:
              - 'null'
              - 'true'
              - 'false'
          in: query
          name: verificationResult
      security:
        - BearerAuth: []
  '/posts/{id}':
    parameters:
      - schema:
          type: number
          minimum: 1
        name: id
        in: path
        required: true
        description: post id
    get:
      description: get post by id
      summary: Your GET endpoint
      tags:
        - posts
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostGetDetail'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      operationId: get-posts-id
      security:
        - BearerAuth: []
  '/posts/{id}/verification':
    parameters:
      - schema:
          type: number
          minimum: 1
        name: id
        in: path
        required: true
        description: post id
    patch:
      description: set verification result for post
      summary: Your GET endpoint
      tags:
        - posts
      responses:
        '200':
          description: OK
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      operationId: get-posts-id-validated
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                result:
                  type: boolean
                reason:
                  type: string
              required:
                - result
      security:
        - BearerAuth: []
  '/posts/{id}/like':
    parameters:
      - schema:
          type: number
          minimum: 1
        name: id
        in: path
        required: true
        description: post id
    post:
      summary: ''
      operationId: post-posts-id-like
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  currentSelfLikeValue:
                    type: number
                  currentSumLikes:
                    type: number
                required:
                  - currentSelfLikeValue
                  - currentSumLikes
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      tags:
        - posts
      description: new or toggle/replace old like for post
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                value:
                  type: number
                  enum:
                    - -1
                    - 1
              required:
                - value
      security:
        - BearerAuth: []
  '/posts/{id}/incrementView':
    parameters:
      - schema:
          type: number
          minimum: 1
        name: id
        in: path
        required: true
        description: post id
    post:
      summary: ''
      operationId: post-posts-id-increment-veiw
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  currentViewsCount:
                    type: number
                required:
                  - currentViewsCount
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      tags:
        - posts
      description: new or toggle/replace old like for post
      security:
        - BearerAuth: []
  /roles:
    get:
      summary: Get list of all users roles
      description: Get all roles of users
      operationId: get-user-roles
      tags:
        - const
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    roleName:
                      type: string
                  required:
                    - roleName
    parameters: []
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    NotFoundError:
      description: Not
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    ForbiddenError:
      description: Access denied
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    BadRequestError:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
  schemas:
    ErrorResponse:
      title: DetailOfError
      type: object
      description: object with detail of error
      properties:
        status:
          type: number
        message:
          type: string
          description: error detail
        success:
          type: boolean
        reason:
          type: string
    UserAuthorization:
      title: UserAutrorization
      type: object
      description: User date to authorizate
      properties:
        login:
          type: string
          minLength: 3
          default: admin
        password:
          type: string
          minLength: 3
          default: admin
      required:
        - login
        - password
    PostGetManage:
      title: PostGetManage
      type: object
      properties:
        id:
          type: number
        title:
          type: string
        content:
          type: string
        owner:
          type: object
          required:
            - id
            - login
          properties:
            id:
              type: number
            login:
              type: string
        updatedAt:
          type: string
        latsVerification:
          type: object
          required:
            - id
            - result
            - reson
          nullable: true
          properties:
            id:
              type: number
            result:
              type: boolean
            reson:
              type: string
      required:
        - id
        - title
        - content
        - owner
        - updatedAt
        - latsVerification
    PostGetView:
      title: PostGetView
      type: object
      properties:
        id:
          type: number
        title:
          type: string
        content:
          type: string
        owner:
          type: object
          required:
            - id
            - login
          properties:
            id:
              type: number
            login:
              type: string
        updatedAt:
          type: string
        latsVerification:
          type: object
          required:
            - id
            - result
            - reson
          nullable: true
          properties:
            id:
              type: number
            result:
              type: boolean
            reson:
              type: string
        likesSum:
          type: number
        commentsCount:
          type: number
        viewsCount:
          type: number
      required:
        - id
        - title
        - content
        - owner
        - updatedAt
        - latsVerification
        - likesSum
        - commentsCount
    PostGetDetail:
      title: PostGetDetail
      type: object
      properties:
        id:
          type: number
        title:
          type: string
        content:
          type: string
        owner:
          type: object
          required:
            - id
            - login
          properties:
            id:
              type: number
            login:
              type: string
        createdAt:
          type: number
        commentsCount:
          type: number
        likesCount:
          type: number
      required:
        - id
        - title
        - content
        - owner
        - createdAt
        - commentsCount
        - likesCount
